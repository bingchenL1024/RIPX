% Bingchen Liu July 2,2025
% Version: include slope bottom 
% This code generate the vorticity forcing using Falk's method with
% cross-shore: uniform forcing  
% alongshore: Fourier components in alongshore
% Time: AR1 in time in 3rd dimension

% Forcing decomposition G = Psi0*Psim1*Psim2 
% Psi0: background forcing with given Swb
% G0: magnitude from G0
% W: width/envolope function


addpath(genpath('/home/n2kumar/MAT_Mytoolbox/jlab/'));

clearvars -except test
close all

%% initial setup

slp =0.02; %beach slope 

Ly=1500;
dy=1;
Lsz=350;
dx=1;
t_tot= 100;
dt=1;
x_max = -50;%shore line location so that the domain does go to 0 to prevent h=0
x=-Lsz:dx:x_max;
nx=length(x);
y=0:dy:Ly;
ny=length(y);
t=0:dt:t_tot;
nt = length(t);
h_deep = slp*Lsz;
h=x.*(-slp);
g= 9.81; %gravitational constant 
Tp = 14;
ky0_nond= 1.4*10^(-2);
Irb=0.2;
ky0 = ky0_nond./(Irb*h);


%% generate ky
[X,Y]=meshgrid(x,y);

if mod(ny,2)==0
    ky=[-ny/2+1:1:ny/2 ]';    
else
    ky=[-(ny-1)/2:1:(ny-1)/2 ]';
end
ky=ky/Ly;
%ky=ky(abs(ky)<=0.2); %add ky limit to 0.2cmp
dky=ky(2)-ky(1);


%% get the magnitude function G0 first
mxx0=.075;
x00=100;
bb=x00/2^(1/3);
aa=mxx0*2^(1/3)*1.5/bb;
G0=aa*(-X+x_max)./(1+((-X+x_max)/bb).^3); %G0 magnitude function
G0 = repmat(G0,1,1,nt);
plot(x,G0(1,:,1))

%% ========> generate decorrelation time scale tau and c 

G0_nond = G0(1,:,1)/max(G0(1,:,1));
tau = sqrt(h/g).*(0.027*exp(4.37*G0_nond)+1.28);
%tau = sqrt(h/g);
c_phase = sqrt(g.*h);
ctau = tau.*c_phase; %c*tau scaling for dx

%% get Weibull spectra (S_wb)
%ky0=.02;%peF_comp alongshore wavenumber

phi=2*pi*rand(size(ky)); %random phase for the Fourier component(Note: needs to be the same for all x) 

for xloc = 1:nx
    S_wb(:,xloc)=make_WB(ky,ky0(xloc));
    var0=sum(S_wb(:,xloc))*dky; % the variance I think I should get
    S_wb(:,xloc) = S_wb(:,xloc) / var0; % the variance should now be 1 % becasue int (S_wb dky) = 1 here
    F_comp(:,xloc)=(2*ny*S_wb(:,xloc)).^.5.*exp(1i*phi); % Fourier component with random phase; Ny is for Matlab fft scaling
    Psi(:,xloc) = real(ifft(ifftshift(F_comp(:,xloc))));
end 

figure()
pcolorcen(X,Y,Psi);
xlabel('x(m)')
ylabel('y(m)')
title('IFFT of Fourier compoments')




%%%%%%%%%%%%%% check Psi using S_wb --> should be the same 
[f1,S1] = fft_data(Psi(:,1),dy);
[f2,S2] = fft_data(Psi(:,280),dy);

figure()
subplot(121)
loglog(f1,S1,ky,2*S_wb(:,1))
legend('loc1','Theory')
xlabel('k_y(m^{-1})')
ylabel('Spectra energy')
subplot(122)
loglog(f2,S2,ky,2*S_wb(:,280))
legend('loc1','Theory')
xlabel('k_y(m^{-1})')
ylabel('Spectra energy')


%% follow the wave crest and update all var 
nwave= round(t_tot/Tp);%total number waves want to include in the simulation. Generally >t_tot/Tp
active_wave = zeros(nwave,nt);
x_wave = -Lsz*ones(nwave,nt);
b_wave = zeros(nwave,nt); % b term that represents stochastic processes



for ind_wave = 1:nwave %initilize all waves only when it's time (set beginning properties)
    active_wave(ind_wave,round((ind_wave-1)*Tp)+1:end)=1;
    b_wave(ind_wave,round((ind_wave-1)*Tp)+1)=randn(1,1); %initilize b term for only the first step
end 


x_wave(:,1)=-350; %initial locaiton of the wave crest 
for ind_wave = 1:nwave
    for tind = 1:nt-1
        if active_wave(ind_wave,tind) == 1 %only propagate wave when it's its turn
            x_wave(ind_wave,tind+1) = x_wave(ind_wave,tind)+ 1.1*dt*sqrt(g*(-slp*x_wave(ind_wave,tind))); %1.1 is the scaling factor
            if x_wave(ind_wave,tind+1) >x_max %if wave is in the domain 
            active_wave(ind_wave,tind+1:end) = 0; %deactive the wave if it's outside of the domain
            end 
        end 
    end 
end 

x_wave= round(x_wave);

% figure()
% imagesc(active_wave)
% xlabel('time (s)')
% ylabel('index for waves')
% title('Active map')
% 
% 
% figure()
% imagesc(x_wave)
% xlabel('time (s)')
% ylabel('index for waves')
% title('Wave location')
% cb=colorbar;
% cb.Label.String = 'Wave location (m)';

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% make b term %%%%%%%%%%%%%%%%%%%%%%%%%%
for ind_wave = 1:nwave
    for tind = 2:nt-1
        if active_wave(ind_wave,tind)==1 %only start propagate b forward if current b is known
            xloc = x_wave(ind_wave,tind);
            tau_loc = interp1(x,tau,xloc);
            b_wave(ind_wave,tind+1) = (1-dt/tau_loc)*b_wave(ind_wave,tind+1)+dt*sqrt(2/tau_loc)*randn(1,1);
        end 

    end 
end 

% then turn b_wave to 3D matrix, b_wave_tot that has dimension same as curlFbr, i.e.,
% fill in the b_wave_tot with elements in b_wave


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% W (width function)%%%%%%%%%%%%%%%%%%%%%%%%%
A1 = 3.16; %note need to divide by ctau in the loop for normalization
A2 = 3.57;
A3 = 1.82;
A4 = 1.1;
W_tot = zeros(ny,nx,nt);


for tind = 1:nt %@each time step 
    for ind_wave = 1:nwave
        if active_wave(ind_wave,tind) ==1
           x_wave_snap = x_wave(ind_wave,tind); % local wave location for given wave
           x_wave_snap=round(x_wave_snap);
           ctau_loc = interp1(x,ctau,x_wave_snap); %local ctau scaling 
           %test_amp = (A1/(cos(A4)*sqrt(ctau_loc)));
           W_wave = b_wave(ind_wave,tind)*(A1/(cos(A4)*sqrt(ctau_loc))).*exp(-A2.*abs(X-x_wave_snap)/ctau_loc).*cos(A3.*abs(X-x_wave_snap)/ctau_loc+A4);
           W_tot(:,:,tind) = W_tot(:,:,tind)+W_wave;
        
        end 
    end
    cFbr_temp(:,:,tind) = squeeze(W_tot(:,:,tind)).*Psi;
end 



cFbr=G0.*cF; %final field.

head = 'data generated from generate_forcing_FFBL';

save('/data1/bliu/data/parameterization_example','cFbr','G0','W','X','Y',"head")
%% %%%%%%%%%%%%%%%%%%% visual of the width function 

figure(10)
for tind = 1:nt
    subplot(121)
    plot(x,W_tot(1,:,tind))
    ylim([-3,3])
    ylabel('W(x-ct)*b(t)')
    xlabel('x(m)')
    cmocean('balance');
    caxis([-5,5])
    subplot(122)
    pcolorcen(X,Y,cFbr(:,:,tind))
    cmocean('balance');
    caxis([-0.2,0.2])
    title('$\nabla \times F_{br}$','Interpreter','latex')
    drawnow
    pause(0.5)
end 



%%
figure()
pcolorcen(-X,Y,cFbr(:,:,10))
cmocean('balance');
caxis([-0.3,0.3])

function S_wb=make_WB(ky,ky0)
% make Weibull spectra using peak wavenumber ky0 and wavenumber vector ky
beta= 1.4; %modified gamma in the new paper version 
lam = ky0/((beta-1)/beta)^(1/beta); 
S_wb= (beta/(lam^beta))*abs(ky).^(beta-1).* exp(-(abs(ky/lam)).^(beta)); % Weibull spectra
end 