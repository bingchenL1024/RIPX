% Bingchen Liu May 21, 2025
% This code generate example forcing using SDE 

close all
clear all 
%% Gille note 
clear
A=randn(1000,100);
for i=1:100
AcA(:,i)=xcov(A(:,i),A(:,i),'unbiased'); % autocovariance for
end
fAcA=fft(AcA(500:1500,:)); % Fourier transform of autocovariance
frequency=(0:500)/1000;
loglog(frequency,2*abs(mean(fAcA(1:501,:),2)),'LineWidth',3)
set(gca,'FontSize',16)
xlabel('Frequency (cycles per data point)','FontSize',16)
ylabel('Spectral energy','FontSize',16)


mean_AcA=mean(AcA,2);
fmean_AcA=fft(mean_AcA(500:1500));
hold on
loglog(frequency,2*abs(fmean_AcA(1:501,:))*1.1,'r','LineWidth',3)


a=A(:);
N=length(a);
aca=xcov(a,a,'unbiased');
faca=fft(aca(N-500:N+500));
loglog(frequency,2*abs(faca(1:501)),'LineWidth',3)
legend('average of FFTs of many autocovariances',...
'FFT of averaged autocovariance (scaled by 1.1)','without chunkify')

%% simple non-stochastic test
close all
clear all 


dt = 0.1;
tmax=  50;
t = 0:dt:tmax;
N = length(t);
N_half= (N-1)/2;
omega1  = 2*pi/10;
omega2  = 2*pi/5;
x = sin(t*omega1)+sin(t*omega2);



[covar,lag] = xcorr(x,'unbiased');
lag = lag*dt;
%x_fft= fft(x);
covar_fft= fft(covar(N_half:N_half+N-1)); % only take the middle section of the autocovar
spec_covar = 2*abs(covar_fft(1:(length(covar_fft)-1)/2+1))*dt; %multiple 2 for the other half of the fft

freq_fromlag = (0:(N-1)/2)./tmax; %

[freq,spec] = fft_data(x,dt);



figure()
subplot(221)
plot(t,x)
subplot(222)
plot(lag,covar)
subplot(223)
plot(freq,spec)
xlim([0,0.3])
subplot(224)
plot(freq_fromlag,spec_covar)
xlim([0,0.3])
%% Orstein-Uhlenbeck process 
clear
th = 0.1;
mu = 0;
sig = 0.3;
dt = 1e-2;
tmax = 20;
t = 0:dt:tmax;             % Time vector
x = zeros(1,length(t)); % Allocate output vector, set initial condition
rng(1);                 % Set random seed
for i = 1:length(t)-1
    x(i+1) = x(i)+th*(mu-x(i))*dt+sig*sqrt(dt)*randn;
end

[acf,lags] = autocorr(x);

figure()
subplot(121)
plot(t,x);
subplot(122)
plot(lags,acf)


%% AR1 Method in Jekins and Watts (FDA eq 5.2.24) derivation see notebook and photo copy 


close all
clear all 

tau = 2; % decorrelation time scale in autocrr of e^{-t/tau}
sig = 0.3;
dt = 1e-3;
tmax = 200;
t = 0:dt:tmax;             % Time vector
N = length(t);
N_half= (N-1)/2;
x = zeros(1,length(t)); % Allocate output vector, set initial condition
%rng(1);                 % Set random seed
for i = 1:length(t)-1
    x(i+1) = x(i)-(dt/tau)*x(i)+(dt/tau)*randn(1,1);
end

xmean = mean(x);
x_mean_plot =ones(length(t),1)*xmean;
x= detrend(x); %demean the data


[covar,lag] = xcorr(x,'unbiased');
lag = lag*dt;
%x_fft= fft(x);
covar_fft= fft(covar(N_half:N_half+N-1)); % only take the middle section of the autocovar
spec_covar = 2*abs(covar_fft(1:(length(covar_fft)-1)/2+1))*dt; %multiple 2 for the other half of the fft
freq_fromlag = (0:(N-1)/2)./tmax; %

[freq,spec] = fft_data(x,dt);



% compare with theory 
t_lag = 0:dt:tau*3;
auto_pred = exp(-t_lag/tau);
[acf,lags_num] = autocorr(x,'NumLags',2*(tau/dt));
lags = lags_num*dt;


% plot 
linewd = 2;
figure()
subplot(121)
plot(t,x);
hold on 
yline(xmean,'LineWidth',linewd)
hold off 

subplot(122)
plot(lags,acf,'LineWidth',linewd)
hold on 
plot(t_lag,auto_pred,'LineWidth',linewd)
hold off 


figure()
subplot(221)
plot(t,x)
subplot(222)
plot(lag,covar)
subplot(223)
loglog(freq,spec)
xlim([0,0.3])
subplot(224)
loglog(freq_fromlag,spec_covar)
xlim([0,0.3])


%% AR1 method in Jenkins and Watts (discrete AR1 eq 5.2.26)
close all
clear all 

a1=0.9;
tmax = 500;
t = 0:1:tmax;             % Time vector
N = length(t);
N_half= (N-1)/2;
x = zeros(1,length(t)); % Allocate output vector, set initial condition
%rng(1);                 % Set random seed
for i = 1:length(t)-1
    x(i+1) =a1*x(i) +randn(1,1);
end

xmean = mean(x);
x_mean_plot =ones(length(t),1)*xmean;
x= detrend(x); %demean the data

% compare with theory 
%t_lag = 0:dt:tau*3;
%auto_pred = exp(-t_lag/tau);
[acf,lags] = autocorr(x);
%lags = lags_num*dt;
rho_xx=  a1.^lags;

figure()
subplot(121)
plot(t,x)
subplot(122)
plot(lags,acf)
hold on 
plot(t,rho_xx)
hold off 
xlim([0,50])
%% AR2 Method in Jekins and Watts (FDA 5.2.28) 

close all
clear all 

a1 = 1; % decorrelation time scale in autocrr of e^{-t/tau}
a2 = -0.5;
dt = 1;
tmax = 200;
t = 0:dt:tmax;             % Time vector
N = length(t);
N_half= (N-1)/2;
x = zeros(1,length(t)); % Allocate output vector, set initial condition
x(1) = randn(1,1);
x(2) = randn(1,1);
%rng(1);                 % Set random seed
for i = 2:length(t)-1
    x(i+1) = (dt^2/a2)*randn(1,1)+(2-dt*(a1/a2)+dt^2/a2)*x(i)-(1-dt*(a1/a2))*x(i-1);
end

xmean = mean(x);
x_mean_plot =ones(length(t),1)*xmean;
x= detrend(x); %demean the data

figure()
plot(x)


%% AR2 discrete (5.2.31)


close all
clear all 

% =======================> result from fit 
ct=3; % convert factor for nond x coordinate to actual x coordinate (fit is done is nond-x coordinate)
R_fit = 0.03171^(1/ct); %input from data fit results 
omega_fit = 1.785/ct;
phi_fit = -1.246;
x_test= 0:0.1:5;
rho_xx_c123 = R_fit.^x_test.*cos(omega_fit.*x_test-phi_fit)/cos(phi_fit);
plot(x_test,rho_xx_c123)



%% =======================> use the fit to derive a1 and a2 
% a2 = -R_fit^2;
% a1 = 2*(-a2)^(0.5)*cos(omega_fit);
a2 = -0.5;
a1 = 1;
dt = 1;
tmax = 10000;
t = 0:dt:tmax;             % Time vector
N = length(t);
N_half= (N-1)/2;
x = zeros(1,length(t)); % Allocate output vector, set initial condition
x(1) = randn(1,1);
x(2) = randn(1,1);
%rng(1);                 % Set random seed
for i = 2:length(t)-1
    x(i+1) = a1*x(i)+a2*x(i-1)+randn(1,1);
end

xmean = mean(x);
x_mean_plot =ones(length(t),1)*xmean;
x= detrend(x); %demean the data

[acf,lags_num] = autocorr(x);
lags = lags_num;
R = (-a2)^0.5;
omega = acos(a1/(2*R));
%phi = -1.246;
phi = atan((1-R^2)/(1+R^2))*tan(omega);
rho_xx = R.^(lags).*cos(omega.*lags-phi)./cos(phi);

% ct=3; % convert factor for nond x coordinate to actual x coordinate (fit is done is nond-x coordinate)
% R_fit = 0.03171^(1/ct); %input from data fit results 
% omega_fit = 1.785/ct;
% phi_fit = -1.246;
% x_test= 0:0.1:5;
% rho_xx_c123 = R_fit.^x_test.*cos(omega_fit.*x_test-phi_fit)/cos(phi_fit);
% %rho_xx_c123 = exp(-x_test/0.84).*cos(x_test/1.65+1.23)./cos(1.23);
% plot(x_test,rho_xx_c123)

figure()
subplot(211)
plot(x)
hold on
yline(0)
hold off
xlim([0,50])
subplot(212)
plot(lags_num,acf)
hold on 
plot(lags,rho_xx)
hold off 
legend('data','theory')
